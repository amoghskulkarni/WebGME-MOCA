#!/usr/bin/python

# Static imports
from openmdao.api import IndepVarComp, Group, Problem
import lib.components as components
import lib.groups as groups

# Dynamic imports
<%
if (driver === 'ScipyOptimizer') {
-%>
from openmdao.api import ScipyOptimizer
<%
} else if (driver === 'FullFactorialDOE') {
-%>
from openmdao.api import FullFactorialDriver
<%
}
-%>
<%
if (recorder === 'Dump') {
-%>
from openmdao.api import DumpRecorder
<%
} else if (recorder === 'Specific') {
-%>
from openmdao.api import SqliteRecorder
<%
}
-%>
<%
if (algebraicLoop) {
-%>
from openmdao.api import NLGaussSeidel, ScipyGMRES
<%
}
-%>

class RootGroup(Group):
    def __init__(self):
        super(RootGroup, self).__init__()

<%
// add() statements for design variables
for (var i = 0; i < desvars.length; i++) {
-%>
        self.add('<%= desvars[i].name %>', IndepVarComp('<%= desvars[i].connection[0].dst %>', 0.0))
<%
}
-%>
<%
// Generate the code for add() statements for components -
// add instances of components
for (var j = 0; j < compInstances.length; j++) {
    promotesString = '';
    for (var k = 0; k < compInstances[j].promotes.length; k++) {
        promotesString += "'" + compInstances[j].promotes[k] + "'";
        if (k != compInstances[j].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= compInstances[j].name %>', components.<%= compInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>
<%
// Generate the code for add() statements for groups -
// add instances of groups
for (var j = 0; j < groupInstances.length; j++) {
    var promotesString = '';
    for (var k = 0; k < groupInstances[j].promotes.length; k++) {
        promotesString += "'" + groupInstances[j].promotes[k] + "'";
        if (k != groupInstances[j].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= groupInstances[j].name %>', groups.<%= groupInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

<%
// Generate the code for connect() statements for connections between ports
for (var j = 0; j < connections.length; j++) {
-%>
        self.connect('<%= connections[j].srcParent %>.<%= connections[j].src %>', '<%= connections[j].dstParent %>.<%= connections[j].dst %>')
<%
}
-%>
<%
// Generate the code for connect() statements for connections
// between IndepVarComps' ports and ports
for (var j = 0; j < desvars.length; j++) {
-%>
        self.connect('<%= desvars[j].name %>.<%= desvars[j].connection[0].dst %>', '<%= desvars[j].connection[0].dstParent %>.<%= desvars[j].connection[0].dst %>')
<%
}
-%>
<%
// Change nl_solver and ln_driver in case of algebraic loop
if (algebraicLoop) {
-%>

        # Special solvers for handling algebraic loops
        self.nl_solver = NLGaussSeidel()
        self.nl_solver.options['atol'] = 1.0e-12
        self.ln_solver = ScipyGMRES()
<%
}
-%>

class <%= name %>(Problem):
    def __init__(self):
        super(<%= name %>, self).__init__()

        self.root = RootGroup()
<%
// Driver settings
if (driver === 'ScipyOptimizer') {
-%>

        driver = ScipyOptimizer()
        driver.options['optimizer'] = 'SLSQP'

<%
    for (var i = 0; i < constraints.length; i++) {
        limitsString = '';
        if (constraints[i].enableUpper) {
            limitsString = 'upper=';
            valueString = constraints[i].upper;
            if (valueString.indexOf('.') === -1)
                valueString += '.0';
            limitsString += valueString;
        }
        if (constraints[i].enableLower) {
            limitsString += ', lower=';
            valueString = constraints[i].lower;
            if (valueString.indexOf('.') === -1)
                valueString += '.0';
            limitsString += valueString;
        }
        if (!constraints[i].enableLower && !constraints[i].enableUpper)
            break;
-%>
        driver.add_constraint('<%= constraints[i].connection[0].srcParent %>.<%= constraints[i].connection[0].src %>', <%= limitsString %>)
<%
    }
-%>
<%
} else if (driver === 'FullFactorialDOE') {
-%>

        driver = FullFactorialDriver(<%= doeSamples %>)
<%
}
-%>
<%
// add recorder
if (recorder === 'Dump') {
-%>

        rec = DumpRecorder('out/<%= name %>_dumpfile')
        rec.options['record_params'] = True
        rec.options['record_unknowns'] = True
        driver.add_recorder(rec)
<%
} else if (recorder === 'Specific') {
        var incWord = "'" + "includes" + "'";
        var incString = '';
        for (var i = 0; i < records.length; i++) {
            // construct incString
            incString += "'" + records[i].connection[0].srcParent + "." + records[i].connection[0].src + "'";
            if (i != records.length - 1)
                incString += ", ";
        }
        if (incString === "")
            incString = "'" + "*" + "'";
-%>

        rec = SqliteRecorder('out/<%= name %>_sqlitefile')
        rec.options['record_params'] = True
        rec.options['record_unknowns'] = True
        rec.options[<%- incWord %>] = [<%- incString %>]
        driver.add_recorder(rec)
<%
}
-%>

<%
// add_desvar() statements for design variables
for (var i = 0; i < desvars.length; i++) {
-%>
        driver.add_desvar('<%= desvars[i].name %>.<%= desvars[i].connection[0].dst %>', lower=<%= desvars[i].lower %>, upper=<%= desvars[i].upper %>)
<%
}
-%>

<%
// add_objective() statements for objectives
for (var i = 0; i < objectives.length; i++) {
-%>
        driver.add_objective('<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>')
<%
}
-%>

        self.driver = driver
        self.setup()


if __name__ == "__main__":

    top = <%= name %>()

    print "Running the MOCA problem <%= name %>"

    top.run()

    print "Result:"
    print "------"

<%
// Print result in case of optimizer
if (driver === 'ScipyOptimizer') {
-%>
    print "\tObjective(s):"
    print "\t------------"
<%
    for (var i = 0; i < objectives.length; i++) {
-%>
    print("\t\t<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %> = %f" % (top['<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>']))
<%
    }
-%>
    print "\tDesign variable(s):"
    print "\t------------------"
<%
    for (var i = 0; i < desvars.length; i++) {
-%>
    print("\t\t<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %> = %f" % (top['<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %>']))
<%
    }
} else {
-%>
    print "The DOE result is written in a file named <%= name %>_dumpfile or <%= name %>_sqlitefile in the parent folder."
<%
}
-%>
