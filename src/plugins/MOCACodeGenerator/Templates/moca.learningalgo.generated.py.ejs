#!/usr/bin/python
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.externals import joblib

import numpy as np
from math import sqrt
from matplotlib import pyplot as plt
from time import time

<%
    var featureString = '';
    for (var i = 0; i < featurePorts.length; i++) {
        featureString += featurePorts[i].name
        if (i < featurePorts.length - 1) {
            featureString += ', ';
        }
    }
    if (featureString !== '') {
        featureString = ', ' + featureString;
    }

    var labelString = '';
    for (i = 0; i < labelPorts.length; i++) {
        labelString += labelPorts[i].name
        if (i < labelPorts.length - 1) {
            labelString += ', ';
        }
    }
    if (labelString !== '') {
        labelString = ', ' + labelString;
    }
-%>

class <%= name %>():
    def __init__(self<%= featureString %><%= labelString %>):
        # Get features
        self.features = {}
<%
    for (i = 0; i < featurePorts.length; i++) {
-%>
        self.features['<%= featurePorts[i].name %>'] = <%= featurePorts[i].name %>
<%
    }
-%>

        # Get labels
        self.labels = {}
<%
    for (i = 0; i < labelPorts.length; i++) {
-%>
        self.labels['<%= labelPorts[i].name %>'] = <%= labelPorts[i].name %>
<%
}
-%>

        # Training and testing datasets
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None

        # Placeholder: List for the trained models
        self.trained_model = None

    def train(self):
        np.random.seed()

        in_values = []
        out_values = []

        for data_point in range(len(self.features[self.features.keys()[0]])):
            feature_vector = [self.features[key][data_point] for key in self.features]
            label_vector = [self.labels[key][data_point] for key in self.labels]
            in_values += feature_vector
            out_values += label_vector

        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(in_values, out_values, test_size=0.1)

        unique_id_for_model = ''
<%
    // TODO: add other algorithms
    if (algorithm === 'Linear') {
-%>
        self.trained_model = linear_model.LinearRegression()
        self.trained_model.fit(self.X_train, self.y_train)
<%
    }
-%>
        if self.trained_model is not None:
            unique_id_for_model = '<%= name %>_' + str(int(time() * 1000000))
            joblib.dump(self.trained_model, unique_id_for_model + '.pkl')

            print "Trained model " + unique_id_for_model + " saved."
        else:
            print "Model not trained."

    def predict(self):
        y_pred = self.trained_model.predict(X=self.X_test)
        print "y_act: ", self.y_test
        print "y_pred: ", y_pred

        print("RMS error: %.2f" % sqrt(mean_squared_error(self.y_test, y_pred)))
        print('Variance score: %.2f' % r2_score(self.y_test, y_pred))

        fig = plt.figure()
        plt.plot(self.X_train, self.y_train, 'g^', markersize=5, label=u'Training data')
        plt.plot(self.X_test, self.y_test, 'b.', markersize=5, label=u'Testing data')
        plt.plot(self.X_test, y_pred, 'r.', markersize=5, label=u'Predictions')
        plt.show()
