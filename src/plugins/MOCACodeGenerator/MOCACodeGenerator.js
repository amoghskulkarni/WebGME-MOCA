/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Feb 01 2016 12:33:01 GMT-0600 (Central Standard Time).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'text!./metadata.json',
    'common/util/ejs',
    'common/util/xmljsonconverter',
    'plugin/MOCACodeGenerator/MOCACodeGenerator/Templates/Templates',
    'q',
    'plugin/MOCACodeGenerator/MOCACodeGenerator/Library/CodeGenerationUtils'
], function (
    PluginConfig,
    PluginBase,
    pluginMetadata,
    ejs,
    Converter,
    TEMPLATES,
    Q,
    codeGenUtils) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MOCACodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MOCACodeGenerator.
     * @constructor
     */
    var MOCACodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    MOCACodeGenerator.metadata = pluginMetadata;

    // Prototypal inheritance from PluginBase.
    MOCACodeGenerator.prototype = Object.create(PluginBase.prototype);
    MOCACodeGenerator.prototype.constructor = MOCACodeGenerator;

    /**
     * Gets the name of the MOCACodeGenerator.
     * @returns {string} The name of the plugin.
     * @public
     */
    MOCACodeGenerator.prototype.getName = function () {
        return 'MOCACodeGenerator';
    };

    /**
     * Gets the semantic version (semver.org) of the MOCACodeGenerator.
     * @returns {string} The version of the plugin.
     * @public
     */
    MOCACodeGenerator.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string|Error, plugin.PluginResult)} callback - the result callback
     */
    MOCACodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
        nodeObject = self.activeNode;

        if (self.core.getParent(nodeObject) === null &&
            self.core.getAttribute(nodeObject, 'name') !== "ROOT") {
            callback(new Error('The plugin has to be executed from ROOT.'), self.result);
            return;
        }

        self.generateDataModel(nodeObject)
            .then(function (dataModel) {
                // Create JSON files for the models only if the plugin is invoked at the ROOT
                if (self.getMetaType(nodeObject) === null) {
                    self.logger.info(JSON.stringify(dataModel, null, 4));
                    return self.generateArtifact('ROOT', dataModel);
                }
                else if (self.core.getAttribute(self.getMetaType(nodeObject), 'name') === 'Problem') {
                    return self.generateArtifact('Problem', dataModel);
                }
                else if (self.core.getAttribute(self.getMetaType(nodeObject), 'name') === 'ProcessFlow') {
                    return self.generateArtifact('ProcessFlow', dataModel);
                }
                else if (self.core.getAttribute(self.getMetaType(nodeObject), 'name') === 'DataDrivenComponent') {
                    return self.generateArtifact('DataDrivenComponent', dataModel);
                }
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err);
                self.createMessage(null, err.message, 'error');
                self.result.setSuccess(false);
                callback(null, self.result);
            })
            .done();
    };


    MOCACodeGenerator.prototype.generateDataModel = function (rootNode) {
        var self = this,
            dataModel = {
                comps: [],
                ddComps: [],
                groups: [],
                processFlows: [],
                problems: []
            },
            componentLibraryPromises = [],
            groupLibraryPromises = [],
            processFlowLibraryPromises = [],
            problemLibraryPromises = [];

        var componentPromises = [],
            ddComponentPromises = [],
            groupPromises = [],
            processFlowPromises = [],
            problemPromises = [];

        // If the code generator is invoked from ROOT
        if (self.getMetaType(rootNode) === null) {
            // Load all the children of the ROOT
            return self.core.loadChildren(rootNode)
                .then(function (children) {
                    // Process them all according to their type
                    for (var i = 0; i < children.length; i++) {
                        // If it is ComponentLibrary..
                        if (self.core.getAttribute(self.getMetaType(children[i]) , 'name') === 'ComponentLibrary') {
                            // Load its children (use ComponentLibraryPromises for that) and then get their componentData
                            componentLibraryPromises.push(self.core.loadChildren(children[i])
                                .then(function (comps) {
                                    for (var j = 0; j < comps.length; j++) {
                                        if (self.core.getAttribute(self.getMetaType(comps[j]) , 'name') === 'Component') {
                                            componentPromises.push(self.getComponentData(comps[j]));
                                        }
                                        else if (self.core.getAttribute(self.getMetaType(comps[j]) , 'name') === 'DataDrivenComponent') {
                                            ddComponentPromises.push(self.getDDComponentData(comps[j]));
                                        }
                                    }
                                })
                            );
                        }
                        // If it is GroupLibrary..
                        else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'GroupLibrary') {
                            // Load its children (use GroupLibraryPromises for that) and then get their groupData
                            groupLibraryPromises.push(self.core.loadChildren(children[i])
                                .then(function (groups) {
                                    for (var j = 0; j < groups.length; j++) {
                                        groupPromises.push(self.getGroupData(groups[j]));
                                    }
                                })
                            );
                        }
                        // If it is a ProcessFlowLibrary
                        else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'ProcessFlowLibrary'){
                            // Load its children (use ProcessFlowLibraryPromises for that) and then get their ProcessFlowData
                            processFlowLibraryPromises.push(self.core.loadChildren(children[i])
                                .then(function (processFlows) {
                                    for (var j = 0; j < processFlows.length; j++) {
                                        processFlowPromises.push(self.getProcessFlowData(processFlows[j]));
                                    }
                                })
                            );
                        }
                        // If it is a ProblemLibrary
                        else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'ProblemLibrary') {
                            // Load its children (use ProblemLibraryPromises for that) and then get their ProblemData
                            problemLibraryPromises.push(self.core.loadChildren(children[i])
                                .then(function (problems) {
                                    for (var j = 0; j < problems.length; j++) {
                                        problemPromises.push(self.getProblemData(problems[j]));
                                    }
                                })
                            );
                        }
                    }

                    return Q.all(componentLibraryPromises);
                })
                .then(function () {
                    return Q.all(groupLibraryPromises);
                })
                .then(function () {
                    return Q.all(problemLibraryPromises);
                })
                .then(function () {
                    return Q.all(processFlowLibraryPromises);
                })
                .then(function () {
                    return Q.all(componentPromises);
                })
                .then(function (componentsData) {
                    dataModel.comps = componentsData;
                    return Q.all(ddComponentPromises);
                })
                .then(function (ddComponentsData) {
                    dataModel.ddComps = ddComponentsData;
                    return Q.all(groupPromises);
                })
                .then(function (groupsData) {
                    dataModel.groups = groupsData;
                    return Q.all(processFlowPromises);
                })
                .then(function (processFlowsData) {
                    dataModel.processFlows = processFlowsData;
                    return Q.all(problemPromises);
                })
                .then(function (problemsData) {
                    dataModel.problems = problemsData;
                    return dataModel;
                });
        }

        // If the code generator is invoked from a problem
        else if (self.core.getAttribute(self.getMetaType(rootNode), 'name') === 'Problem') {
            var recursivePromises = [];
            // Load all the children of the problem
            return self.core.loadChildren(rootNode)
                .then(function (children){
                    // Process them all according to their type
                    for (var i = 0; i < children.length; i++) {
                        // If it is a Component..
                        if (self.core.getAttribute(self.getMetaType(children[i]) , 'name') === 'Component') {
                            // Traverse to its base class through the instance tree
                            self.getOriginalBase('Component', componentPromises, children[i]);
                        }
                        // If it is a Group..
                        else if (self.core.getAttribute(self.getMetaType(children[i]) , 'name') === 'Group') {
                            // Call a recursive function which in turn populates the promise lists.
                            // Had to use a recursive function because a group can contain groups and the hierarchy
                            // can be arbitrarily deep.
                            recursivePromises.push(self.recursivelyPopulateGroupContents(componentPromises, groupPromises, children[i]));
                        }
                    }
                    return Q.all(recursivePromises);
                })
                .then(function () {
                    return Q.all(componentPromises);
                })
                .then(function (componentsData) {
                    dataModel.comps = componentsData;
                    return Q.all(groupPromises);
                })
                .then(function (groupsData) {
                    dataModel.groups = groupsData;
                    // Get its problemData
                    problemPromises.push(self.getProblemData(rootNode));
                    return Q.all(problemPromises);
                })
                .then(function (problemData) {
                    dataModel.problems = problemData;
                    return dataModel;
                })
        }

        // If the code generator is invoked from a problem
        else if (self.core.getAttribute(self.getMetaType(rootNode), 'name') === 'ProcessFlow') {
            // No need to recursively populate anything here, this is not a recursive structure as of yet
            processFlowPromises.push(self.getProcessFlowData(rootNode));
            return Q.all(processFlowPromises)
                .then(function (processFlowsData) {
                    dataModel.processFlows = processFlowsData;
                    return dataModel;
                });
        }

        // If the code generator is invoked from a DataDrivenComponent
        else if (self.core.getAttribute(self.getMetaType(rootNode), 'name') === 'DataDrivenComponent') {
            // No need to recursively populate anything here, this is not a recursive structure as of yet
            ddComponentPromises.push(self.getDDComponentData(rootNode));
            return Q.all(ddComponentPromises)
                .then(function (ddComponentsData) {
                    dataModel.ddComps = ddComponentsData;
                    return dataModel;
                });
        }
    };

    /**********************************************************************************************************/
    /* DES i.e. ProcessFlow interpreter methods */
    MOCACodeGenerator.prototype.getProcessFlowData = function (processFlowNode) {
        var self = this,
            processFlowData = {
                name: self.core.getAttribute(processFlowNode, 'name'),
                simend: self.core.getAttribute(processFlowNode, 'SimulationEndTime'),
                processes: [],
                buffers: [],
                connections: []
            },
            processPromises = [],
            bufferPromises = [],
            connectionPromises = [];

        return self.core.loadChildren(processFlowNode)
            .then(function(children) {
                for (var i = 0; i < children.length; i++) {
                    var childMetaType = self.core.getAttribute(self.getMetaType(children[i]), 'name');
                    if (childMetaType === 'Process')
                        processPromises.push(self.getProcessData(children[i]));
                    else if (childMetaType === 'Buffer')
                        bufferPromises.push(self.getBufferData(children[i]));
                    else if (childMetaType === 'ProcToBuffFlow' || childMetaType === 'BuffToProcFlow')
                        connectionPromises.push(self.getMaterialFlowData(children[i]));
                }

                return Q.all(processPromises);
            })
            .then(function (processesData) {
                processFlowData.processes = processesData;
                return Q.all(bufferPromises);
            })
            .then(function (buffersData) {
                processFlowData.buffers = buffersData;
                return Q.all(connectionPromises);
            })
            .then(function (connectionsData) {
                processFlowData.connections = connectionsData;
                return processFlowData;
            });
    };


    MOCACodeGenerator.prototype.getProcessData = function (processNode) {
        var self = this,
            processData = {
                name: self.core.getAttribute(processNode, 'name'),
                processingTime: self.core.getAttribute(processNode, 'ProcessingTime'),
                processShiftOffTime: self.core.getAttribute(processNode, 'ProcessOFFTime'),
                processShiftOnTime: self.core.getAttribute(processNode, 'ProcessONTime')
            };
        return processData;
    };


    MOCACodeGenerator.prototype.getBufferData = function (bufferNode) {
        var self = this,
            bufferData = {
                name: self.core.getAttribute(bufferNode, 'name'),
                size: self.core.getAttribute(bufferNode, 'Size')
            };
        return bufferData;
    };


    MOCACodeGenerator.prototype.getMaterialFlowData = function (connectionNode) {
        var self = this,
            deferred = Q.defer(),
            connectionData = {
                name: self.core.getAttribute(connectionNode, 'name'),
                src: "",
                dst: ""
            };

        self.core.loadPointer(connectionNode, 'src', function (err, srcNode) {
            if (err) {
                deferred.reject(new Error(err))
            } else {
                connectionData.src = self.core.getAttribute(srcNode, 'name');
                self.core.loadPointer(connectionNode, 'dst', function (err, dstNode) {
                    if (err) {
                        deferred.reject(new Error(err));
                    } else {
                        connectionData.dst = self.core.getAttribute(dstNode, 'name');
                        deferred.resolve(connectionData);
                    }
                });
            }
        });

        return deferred.promise;
    };
    /**********************************************************************************************************/

    /**********************************************************************************************************/
    /* DataDrivenComponent interpreter methods */
    MOCACodeGenerator.prototype.getDDComponentData = function (ddComponentNode) {
        var self = this,
            deferred = Q.defer(),
            ddComponentData = {
                name: self.core.getAttribute(ddComponentNode, 'name'),
                dataSources: [],
                dataPreprocs: [],
                learningAlgorithms: [],
                params: [],
                unknowns: [],
                connections: []
            },
            dataSourcePromises = [],
            dataPreprocPromises = [],
            learningAlgoPromises = [],
            paramPromises = [],
            unknownPromises = [],
            connectionPromises = [];

        return self.core.loadChildren(ddComponentNode)
            .then(function (children) {
                for (var i = 0; i < children.length; i++) {
                    var childMetaType = self.core.getAttribute(self.getMetaType(children[i]), 'name');
                    if (childMetaType === 'DataSource')
                        dataSourcePromises.push(self.getDataSourceData(children[i]));
                    else if (childMetaType === 'DataPreprocessor')
                        dataPreprocPromises.push(self.getDataPreprocessorData(children[i]));
                    else if (childMetaType === 'LearningAlgorithm')
                        learningAlgoPromises.push(self.getLearningAlgoData(children[i]));
                    else if (childMetaType === 'Parameter')
                        paramPromises.push(self.getParameterData(children[i]));
                    else if (childMetaType === 'Unknown')
                        unknownPromises.push(self.getUnknownData(children[i]));
                    else if (childMetaType === 'DataConn'
                          || childMetaType === 'OutToLableAssoc'
                          || childMetaType === 'OutToFeatureAssoc'
                          || childMetaType === 'ParamToFeatureAssoc'
                          || childMetaType === 'UnknownToLabelAssoc')
                        connectionPromises.push(self.getConnectionData(children[i]));
                }

                return Q.all(dataSourcePromises);
            })
            .then(function (dataSourcesData) {
                ddComponentData.dataSources = dataSourcesData;
                return Q.all(dataPreprocPromises);
            })
            .then(function (dataPreprocsData) {
                ddComponentData.dataPreprocs = dataPreprocsData;
                return Q.all(learningAlgoPromises);
            })
            .then(function (learningAlgosData) {
                ddComponentData.learningAlgorithms = learningAlgosData;
                return Q.all(paramPromises);
            })
            .then(function (paramsData) {
                ddComponentData.params = paramsData;
                return Q.all(unknownPromises);
            })
            .then(function (unknownsData) {
                ddComponentData.unknowns = unknownsData;
                return Q.all(connectionPromises);
            })
            .then(function (connectionsData) {
                ddComponentData.connections = connectionsData;
                return ddComponentData;
            })
    };
    
    MOCACodeGenerator.prototype.getDataSourceData = function (dataSourceNode) {
        var self = this,
            deferred = new Q.defer(),
            dataSourceData = {
                name: self.core.getAttribute(dataSourceNode, 'name'),
                forEachTag: self.core.getAttribute(dataSourceNode, 'ForEach'),
                operationOnMeasurement: self.core.getAttribute(dataSourceNode, 'Operation'),
                tags: self.core.getAttribute(dataSourceNode, 'Tags'),
                tEnd: self.core.getAttribute(dataSourceNode, 'TimestampEnd'),
                tStart: self.core.getAttribute(dataSourceNode, 'TimestampStart'),
                type: self.core.getAttribute(dataSourceNode, 'Type'),
                value: self.core.getAttribute(dataSourceNode, 'Value'),
                variableNameInDB: self.core.getAttribute(dataSourceNode, 'VariableName'),
                databaseRef: [],
                children: []
            },
            databaseRefPromises = [];

        return self.core.loadChildren(dataSourceNode)
            .then(function (children) {
                for (var i = 0; i < children.length; i++) {
                    var childMetaType = self.core.getAttribute(self.getMetaType(children[i]), 'name');
                    if (childMetaType === 'DatabaseRef') {
                        databaseRefPromises.push(self.helperGetDatabase(children[i]));
                    } else if (childMetaType !== 'Documentation') {
                        dataSourceData.children.push({
                            name: self.core.getAttribute(children[i], 'name'),
                            meta: childMetaType
                        });
                    }
                }

                return Q.all(databaseRefPromises);
            })
            .then(function (databaseRefData) {
                dataSourceData.databaseRef = databaseRefData;
                return dataSourceData;
            })
    };

    MOCACodeGenerator.prototype.helperGetDatabase = function (referenceNode) {
        var self = this;
        return self.core.loadPointer(referenceNode, 'ref')
            .then(function (databaseNode) {
                return self.getDatabaseData(databaseNode);
            });
    };
    
    MOCACodeGenerator.prototype.getDataPreprocessorData = function (dataPreprocNode) {
        var self = this,
            dataPreprocData = {
                name: self.core.getAttribute(dataPreprocNode, 'name'),
                outputFunction: self.core.getAttribute(dataPreprocNode, 'OutputFunction'),
                inputPorts: [],
                outputPorts: []
            };

        return self.core.loadChildren(dataPreprocNode)
            .then(function (children) {
                for (var i = 0; i < children.length; i++) {
                    var childMetaType = self.core.getAttribute(self.getMetaType(children[i]), 'name');
                    if (childMetaType === 'Input') {
                        dataPreprocData.inputPorts.push(self.getInputPortData(children[i]))
                    } else if (childMetaType === 'Output') {
                        dataPreprocData.outputPorts.push(self.getOutputPortData(children[i]))
                    }
                }

                return dataPreprocData;
            })
    };

    MOCACodeGenerator.prototype.getLearningAlgoData = function (learningAlgoNode) {
        var self = this,
            learningAlgoData = {
                name: self.core.getAttribute(learningAlgoNode, 'name'),
                algorithm: self.core.getAttribute(learningAlgoNode, 'Algorithm'),
                outputFunction: self.core.getAttribute(learningAlgoNode, 'OutputFunction'),
                featurePorts: [],
                labelPorts: []
            };

        return self.core.loadChildren(learningAlgoNode)
            .then(function (children) {
                for (var i = 0; i < children.length; i++) {
                    var childMetaType = self.core.getAttribute(self.getMetaType(children[i]), 'name');
                    if (childMetaType === 'Feature') {
                        learningAlgoData.featurePorts.push(self.getInputPortData(children[i]))
                    } else if (childMetaType === 'Label') {
                        learningAlgoData.labelPorts.push(self.getOutputPortData(children[i]))
                    }
                }

                return learningAlgoData;
            })
    };

    MOCACodeGenerator.prototype.getDatabaseData = function (databaseNode) {
        var self = this;
        return {
            name: self.core.getAttribute(databaseNode, 'name'),
            mtcAgentURL: self.core.getAttribute(databaseNode, 'MTConnectAgentURL'),
            dbName: self.core.getAttribute(databaseNode, 'DBName'),
            dbHost: self.core.getAttribute(databaseNode, 'Host'),
            dbPortNo: self.core.getAttribute(databaseNode, 'Port')
        };
    };

    MOCACodeGenerator.prototype.getInputPortData = function (inputPortNode) {
        var self = this;
        return {
            name: self.core.getAttribute(inputPortNode, 'name')
        };
    };

    MOCACodeGenerator.prototype.getOutputPortData = function (outputPortNode) {
        var self = this;
        return {
            name: self.core.getAttribute(outputPortNode, 'name')
        };
    };

    /**********************************************************************************************************/

    // This is a recursive function which goes through a group and populates the lists groupPromises and componentPromises
    MOCACodeGenerator.prototype.recursivelyPopulateGroupContents = function(componentPromises, groupPromises, groupNode) {
        var self = this,
            recursivePromises = [];

        // Traverse to its base class through the instance tree
        self.getOriginalBase('Group', groupPromises, groupNode);

        return self.core.loadChildren(groupNode)
            .then(function (children) {
                for (var i = 0; i < children.length; i++) {
                    // If it is a Component..
                    if (self.core.getAttribute(self.getMetaType(children[i]) , 'name') === 'Component') {
                        // Traverse to its base class through the instance tree
                        self.getOriginalBase('Component', componentPromises, children[i]);
                    }
                    // If it is a Group (be careful here!)..
                    else if (self.core.getAttribute(self.getMetaType(children[i]) , 'name') === 'Group') {
                        recursivePromises.push(self.recursivelyPopulateGroupContents(componentPromises, groupPromises, children[i]));
                    }
                }
                return recursivePromises;
            });
    };


    MOCACodeGenerator.prototype.getOriginalBase = function(compOrGroup, promiseList, node) {
        var self = this,
            baseToPush = null;
        if (compOrGroup === 'Component') {
            baseToPush = self.core.getBase(node);
            while (self.core.getAttribute(self.core.getParent(baseToPush), 'name') !== 'ComponentLibrary'
            || self.core.getAttribute(self.core.getBase(baseToPush), 'name') !== 'Component')
                baseToPush = self.core.getBase(baseToPush);
            promiseList.push(self.getComponentData(baseToPush));
        }
        else if (compOrGroup === 'Group') {
            baseToPush = self.core.getBase(node);
            while (self.core.getAttribute(self.core.getParent(baseToPush), 'name') !== 'GroupLibrary'
            || self.core.getAttribute(self.core.getBase(baseToPush), 'name') !== 'Group')
                baseToPush = self.core.getBase(baseToPush);
            promiseList.push(self.getGroupData(baseToPush));
        }
    };


    MOCACodeGenerator.prototype.getComponentData = function(componentNode) {
        var self = this,
            componentData = {
                name: self.core.getAttribute(componentNode, 'name'),
                type: self.core.getAttribute(componentNode, 'Type'),
                force_fd: self.core.getAttribute(componentNode, 'ForceFD'),
                outputFunction: self.core.getAttribute(componentNode, 'OutputFunction'),
                jacobian: self.core.getAttribute(componentNode, 'Jacobian'),
                parameters: [],
                unknowns: []
            },
            parameterPromises = [],
            unknownPromises = [];

        return self.core.loadChildren(componentNode)
            .then(function(children) {
                for (var i = 0; i < children.length; i++) {
                    if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Parameter')
                        parameterPromises.push(self.getParameterData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Unknown')
                        unknownPromises.push(self.getUnknownData(children[i]));
                }

                return Q.all(parameterPromises);
            })
            .then(function (parametersData) {
                componentData.parameters = parametersData;
                return Q.all(unknownPromises);
            })
            .then(function (unknownsData) {
                componentData.unknowns = unknownsData;
                return componentData;
            });
    };


    MOCACodeGenerator.prototype.getParameterData = function(parameterNode) {
        var self = this,
            deferred = new Q.defer(),
            parameterData = {
                name: self.core.getAttribute(parameterNode, 'name'),
                value: null
            };

        var valueString = self.core.getAttribute(parameterNode, 'Value').toString();
        if (valueString.indexOf('.') === -1)
            valueString += ".0";

        parameterData.value = valueString;

        deferred.resolve(parameterData);

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.getUnknownData = function(unknownNode) {
        var self = this,
            deferred = new Q.defer(),
            unknownData = {
                name: self.core.getAttribute(unknownNode, 'name'),
                value: null,
                type: self.core.getAttribute(unknownNode, 'Type')
            };

        var valueString = self.core.getAttribute(unknownNode, 'Value').toString();
        if (valueString.indexOf('.') === -1)
            valueString += ".0";

        unknownData.value = valueString;

        deferred.resolve(unknownData);

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.getGroupData = function(groupNode) {
        var self = this,
            groupData = {
                name: self.core.getAttribute(groupNode, 'name'),
                algebraicLoop: self.core.getAttribute(groupNode, 'AlgebraicLoop'),
                compInstances: [],
                groupInstances: [],
                connections: []
            },
            compInstancePromises = [],
            groupInstancePromises = [],
            connectionPromises = [];

        return self.core.loadChildren(groupNode)
            .then(function(children) {
                for (var i = 0; i < children.length; i++) {
                    if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Component')
                        compInstancePromises.push(self.getCompInstanceData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Group')
                        groupInstancePromises.push(self.getGroupInstanceData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'DataConn')
                        connectionPromises.push(self.getConnectionData(children[i]));
                }

                return Q.all(compInstancePromises);
            })
            .then(function (compInstancesData) {
                groupData.compInstances = compInstancesData;
                return Q.all(groupInstancePromises);
            })
            .then(function (groupInstancesData) {
                groupData.groupInstances = groupInstancesData;
                return Q.all(connectionPromises);
            })
            .then(function (connectionsData) {
                groupData.connections = connectionsData;
                return groupData;
            });
    };


    MOCACodeGenerator.prototype.getCompInstanceData = function (compInstanceNode) {
        var self = this,
            compInstancesData = {
                name: self.core.getAttribute(compInstanceNode, 'name'),
                base: self.core.getAttribute(self.core.getBase(compInstanceNode), 'name'),
                promotes: []
            };

        return self.core.loadChildren(compInstanceNode)
            .then(function(children) {
                var promotePromises = [];
                for (var i = 0; i < children.length; i++) {
                    promotePromises.push(self.core.loadCollection(children[i], 'dst')
                        .then(function(connections) {
                            var pointerPromises = [];
                            for (var j = 0; j < connections.length; j++) {
                                if (self.core.getAttribute(connections[j], 'name') === 'PrToPortAssoc') {
                                    pointerPromises.push(self.core.loadPointer(connections[j], 'dst'));
                                }
                            }
                            return Q.all(pointerPromises);
                        })
                        .then(function(dstNodes) {
                            for (var j = 0; j < dstNodes.length; j++) {
                                compInstancesData.promotes.push(self.core.getAttribute(dstNodes[j], 'name'));
                            }
                        })
                    );
                }
            })
            .then(function() {
                return compInstancesData;
            });
    };


    MOCACodeGenerator.prototype.getGroupInstanceData = function (groupInstanceNode) {
        var self = this,
            groupInstancesData = {
                name: self.core.getAttribute(groupInstanceNode, 'name'),
                base: self.core.getAttribute(self.core.getBase(groupInstanceNode), 'name'),
                promotes: []
            };

        return self.core.loadChildren(groupInstanceNode)
            .then(function(children) {
                var promotePromises = [];
                for (var i = 0; i < children.length; i++) {
                    promotePromises.push(self.core.loadCollection(children[i], 'dst')
                        .then(function(connections) {
                            var pointerPromises = [];
                            for (var j = 0; j < connections.length; j++) {
                                if (self.core.getAttribute(connections[j], 'name') === 'PrToPortAssoc') {
                                    pointerPromises.push(self.core.loadPointer(connections[j], 'dst'));
                                }
                            }
                            return Q.all(pointerPromises);
                        })
                        .then(function(dstNodes) {
                            for (var j = 0; j < dstNodes.length; j++) {
                                groupInstancesData.promotes.push(self.core.getAttribute(dstNodes[j], 'name'));
                            }
                        })
                    );
                }
            })
            .then(function () {
                return groupInstancesData;
            });
    };


    MOCACodeGenerator.prototype.getConnectionData = function (connectionNode) {
        var self = this,
            deferred = Q.defer(),
            connectionData = {
                name: self.core.getAttribute(self.getMetaType(connectionNode), 'name'),
                src: null,
                srcMeta: null,
                srcParent: null,
                srcParentMeta: null,
                srcOnto: "",
                dst: null,
                dstMeta: null,
                dstParent: null,
                dstParentMeta: null,
                dstOnto: ""
            };

        self.core.loadPointer(connectionNode, 'src', function (err, srcNode) {
            if (err) {
                deferred.reject(new Error(err))
            } else {
                var srcParent = self.core.getParent(srcNode);
                var srcMeta = self.getMetaType(srcNode);
                var srcParentMeta = self.getMetaType(srcParent);

                connectionData.src = self.core.getAttribute(srcNode, 'name');
                connectionData.srcMeta = self.core.getAttribute(srcMeta, 'name');
                connectionData.srcParent = self.core.getAttribute(srcParent, 'name');
                connectionData.srcParentMeta = self.core.getAttribute(srcParentMeta, 'name');

                if (connectionData.name === 'DataConn') {
                    if (connectionData.srcMeta === 'Unknown' || connectionData.srcMeta === 'Parameter') {
                        connectionData.srcOnto = self.core.getAttribute(srcNode, 'OntologyElementID');
                    }
                }

                self.core.loadPointer(connectionNode, 'dst', function (err, dstNode) {
                    if (err) {
                        deferred.reject(new Error(err));
                    } else {
                        var dstParent = self.core.getParent(dstNode),
                            dstMeta = self.getMetaType(dstNode),
                            dstParentMeta = self.getMetaType(dstParent);

                        connectionData.dst = self.core.getAttribute(dstNode, 'name');
                        connectionData.dstMeta = self.core.getAttribute(dstMeta, 'name');
                        connectionData.dstParent = self.core.getAttribute(dstParent, 'name');
                        connectionData.dstParentMeta = self.core.getAttribute(dstParentMeta, 'name');

                        if (connectionData.name === 'DataConn') {
                            if (connectionData.dstMeta === 'Unknown' || connectionData.dstMeta === 'Parameter') {
                                connectionData.dstOnto = self.core.getAttribute(dstNode, 'OntologyElementID');
                            }
                        }

                        deferred.resolve(connectionData);
                    }
                });
            }
        });

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.getProblemData = function (problemNode) {
        var self = this,
            problemData = {
                name: self.core.getAttribute(problemNode, 'name'),
                driver: self.core.getAttribute(problemNode, 'Driver'),
                doeSamples: self.core.getAttribute(problemNode, 'Samples'),
                recorder: self.core.getAttribute(problemNode, 'Recorder'),
                algebraicLoop: self.core.getAttribute(problemNode, 'AlgebraicLoop'),
                constraints: [],
                compInstances: [],
                groupInstances: [],
                connections: [],
                desvars: [],
                objectives: [],
                records: []
            },
            constraintPromises = [],
            compInstancePromises = [],
            groupInstancePromises = [],
            connectionPromises = [],
            desvarPromises = [],
            objectivePromises = [],
            recordPromises = [];

        return self.core.loadChildren(problemNode)
            .then(function(children) {
                for (var i = 0; i < children.length; i++) {
                    if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Component')
                        compInstancePromises.push(self.getCompInstanceData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'Group')
                        groupInstancePromises.push(self.getGroupInstanceData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'DataConn')
                        connectionPromises.push(self.getConnectionData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'DesVarToInConn')
                        desvarPromises.push(self.getDesignVariableData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'OutToObjConn')
                        objectivePromises.push(self.getObjectiveData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'PortToRecConn')
                        recordPromises.push(self.getRecordData(children[i]));
                    else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') === 'PortToConstraintConn')
                        constraintPromises.push(self.getConstraintData(children[i]));
                }

                return Q.all(compInstancePromises);
            })
            .then(function (compInstancesData) {
                problemData.compInstances = compInstancesData;
                return Q.all(groupInstancePromises);
            })
            .then(function (groupInstancesData) {
                problemData.groupInstances = groupInstancesData;
                return Q.all(connectionPromises);
            })
            .then(function (connectionsData) {
                problemData.connections = connectionsData;
                return Q.all(desvarPromises);
            })
            .then(function (desvarsData) {
                problemData.desvars = desvarsData;
                return Q.all(objectivePromises);
            })
            .then(function (objectivesData) {
                problemData.objectives = objectivesData;
                return Q.all(recordPromises);
            })
            .then(function (recordsData) {
                problemData.records = recordsData;
                return Q.all(constraintPromises);
            })
            .then(function (constraintsData) {
                problemData.constraints = constraintsData;
                return problemData;
            });
    };


    MOCACodeGenerator.prototype.getDesignVariableData = function (desvarToInConnNode) {
        var self = this,
            designvariableData = {
                name: null,
                upper: null,
                lower: null,
                value: null,
                setByDriver: null,
                connection: [
                    // dst
                    // dstParent
                ]
            },
            connectionPromises = [];

        return self.core.loadPointer(desvarToInConnNode, 'src')
            .then(function(designvariableNode) {
                designvariableData.name = self.core.getAttribute(designvariableNode, 'name');
                designvariableData.upper = self.core.getAttribute(designvariableNode, 'Upper');
                designvariableData.lower = self.core.getAttribute(designvariableNode, 'Lower');
                designvariableData.value = self.core.getAttribute(designvariableNode, 'Value');
                designvariableData.setByDriver = self.core.getAttribute(designvariableNode, 'SetByDriver');
                connectionPromises.push(self.getConnectionData(desvarToInConnNode));

                return Q.all(connectionPromises);
            })
            .then(function(connectionData) {
                designvariableData.connection = connectionData;
                return designvariableData;
            });
    };


    MOCACodeGenerator.prototype.getObjectiveData = function (outToObjConnNode) {
        var self = this,
            objectiveData = {
                name: null,
                connection: [
                    // src
                    // srcParent
                ]
            },
            connectionPromises = [];

        return self.core.loadPointer(outToObjConnNode, 'dst')
            .then(function(objectiveNode) {
                objectiveData.name = self.core.getAttribute(objectiveNode, 'name');
                connectionPromises.push(self.getConnectionData(outToObjConnNode));

                return Q.all(connectionPromises);
            })
            .then(function(connectionData) {
                objectiveData.connection = connectionData;
                return objectiveData;
            });
    };


    MOCACodeGenerator.prototype.getRecordData = function (portToRecConnNode) {
        var self = this,
            recordData = {
                name: null,
                type: null,
                connection: [
                    // src
                    // srcParent
                ]
            },
            connectionPromises = [];

        return self.core.loadPointer(portToRecConnNode, 'dst')
            .then(function(recordNode) {
                recordData.name = self.core.getAttribute(recordNode, 'name');
                connectionPromises.push(self.getConnectionData(portToRecConnNode));

                return Q.all(connectionPromises);
            })
            .then(function(connectionData) {
                recordData.connection = connectionData;
                return self.core.loadPointer(portToRecConnNode, 'src');
            })
            .then(function(srcNode) {
                var srcType = self.core.getAttribute(self.getMetaType(srcNode) , 'name');
                if (srcType === 'Unknown' || srcType === 'OutPromote') {
                    recordData.type = 'Unknown';
                } else if (srcType === 'Parameter' || srcType === 'InPromote') {
                    recordData.type = 'Param';
                }
                return recordData;
            });
    };


    MOCACodeGenerator.prototype.getConstraintData = function (portToConstraintConnNode) {
        var self = this,
            constraintData = {
                name: null,
                enableUpper: null,
                enableLower: null,
                upper: null,
                lower: null,
                connection: [
                    // src
                    // srcParent
                ]
            },
            connectionPromises = [];

        return self.core.loadPointer(portToConstraintConnNode, 'dst')
            .then(function(constraintNode) {
                constraintData.name = self.core.getAttribute(constraintNode, 'name');
                constraintData.enableUpper = self.core.getAttribute(constraintNode, 'EnableUpper');
                constraintData.upper = self.core.getAttribute(constraintNode, 'Upper').toString();
                constraintData.enableLower = self.core.getAttribute(constraintNode, 'EnableLower');
                constraintData.lower = self.core.getAttribute(constraintNode, 'Lower').toString();
                connectionPromises.push(self.getConnectionData(portToConstraintConnNode));

                return Q.all(connectionPromises);
            })
            .then(function(connectionData) {
                constraintData.connection = connectionData;
                return constraintData;
            });
    };


    MOCACodeGenerator.prototype.generateArtifact = codeGenUtils.generateArtifact;
    // MOCACodeGenerator.prototype.savePythonSourceFiles = codeGenUtils.savePythonSourceFiles;
    // MOCACodeGenerator.prototype.downloadPythonSourceFiles = codeGenUtils.downloadPythonSourceFiles;

    return MOCACodeGenerator;
});
