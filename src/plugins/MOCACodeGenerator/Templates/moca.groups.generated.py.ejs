#!/usr/bin/python

# Static imports
from openmdao.api import Group
<%
for (var i = 0; i < groups[0].compInstances.length; i++) {
-%>
from ..moca_components.<%= groups[0].compInstances[i].base %> import <%= groups[0].compInstances[i].base %>
<%
}
-%>
import sys

# Dynamic imports
<%
var algebraicLoopImport = false;
for (var i = 0; i < groups.length; i++) {
    if (groups[i].algebraicLoop && !algebraicLoopImport) {
        algebraicLoopImport = true;
-%>
from openmdao.api import NLGaussSeidel, ScipyGMRES
<%
        break;
    }
}
-%>

<%
// Generate the code for all the groups
for (var i = 0; i < groups.length; i++) {
    var promotedPorts = [];
-%>
class <%= groups[i].name %>(Group):
    def __init__(self):
        super(<%= groups[i].name %>, self).__init__()

<%
    // Generate the code for add() statements for components -
    // add instances of components
    for (var j = 0; j < groups[i].compInstances.length; j++) {
        promotesString = '';
        for (var k = 0; k < groups[i].compInstances[j].promotes.length; k++) {
            promotesString += "'" + groups[i].compInstances[j].promotes[k] + "'";
            promotedPorts.push(groups[i].compInstances[j].name + "." + groups[i].compInstances[j].promotes[k]);
            if (k != groups[i].compInstances[j].promotes.length - 1)
                promotesString += ', ';
        }
-%>
        self.add('<%= groups[i].compInstances[j].name %>', <%= groups[i].compInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
    }
-%>

<%
    // Generate the code for add() statements for groups -
    // add instances of groups
    for (var j = 0; j < groups[i].groupInstances.length; j++) {
        var promotesString = '';
        for (var k = 0; k < groups[i].groupInstances[j].promotes.length; k++) {
            promotesString += "'" + groups[i].groupInstances[j].promotes[k] + "'";
            promotedPorts.push(groups[i].groupInstances[j].name + "." + groups[i].groupInstances[j].promotes[k]);
            if (k != groups[i].groupInstances[j].promotes.length - 1)
                promotesString += ', ';
        }
-%>
        self.add('<%= groups[i].groupInstances[j].name %>', <%= groups[i].groupInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
    }
-%>

<%
    // Generate the code for connect() statements for connections between ports
    for (var j = 0; j < groups[i].connections.length; j++) {
        var srcConnectString = groups[i].connections[j].srcParent + "." + groups[i].connections[j].src;
        var dstConnectString = groups[i].connections[j].dstParent + "." + groups[i].connections[j].dst;
        // Check whether these strings are in promotedPorts list, i.e. whether these ports are connected
        if (promotedPorts.indexOf(srcConnectString) != -1)
            srcConnectString = srcConnectString.split('.')[1];
        if (promotedPorts.indexOf(dstConnectString) != -1)
            dstConnectString = dstConnectString.split('.')[1];
-%>
        self.connect('<%= srcConnectString %>', '<%= dstConnectString %>')
<%
    }
-%>
<%
    // Change nl_solver and ln_driver in case of algebraic loop
    if (groups[i].algebraicLoop) {
-%>

        # Special solvers for handling algebraic loops
        self.nl_solver = NLGaussSeidel()
        self.nl_solver.options['atol'] = 1.0e-12
        self.ln_solver = ScipyGMRES()
<%
    }
-%>

<%
}
%>
