#!/usr/bin/python

# Static imports
from openmdao.api import IndepVarComp, Group, Problem
<%
var driverDictionary = {
    'ScipyOptimizer': 'ScipyOptimizer',
    'FullFactorialDOE': 'FullFactorialDriver'
}
// Generate the code for import statement for components
for (var i = 0; i < compInstances.length; i++) {
-%>
from lib.moca_components.<%= compInstances[i].base %> import <%= compInstances[i].base %>
<%
}
// Generate the code for import statement for data driven components
for (i = 0; i < ddCompInstances.length; i++) {
-%>
from lib.moca_ddmodels.<%= ddCompInstances[i].base %>.<%= ddCompInstances[i].base %>__MOCAComponent import <%= ddCompInstances[i].base %>
<%
}
for (i = 0 ; i < processFlowInstances.length; i++) {
-%>
from lib.moca_desmodels.<%= processFlowInstances[i].base %>.<%= processFlowInstances[i].base %>__MOCAComponent import <%= processFlowInstances[i].base %>
<%
}
for (i = 0; i < groupInstances.length; i++) {
-%>
from lib.moca_groups.<%= groupInstances[i].base %> import <%= groupInstances[i].base %>
<%
}
for (i = 0; i < problemInstances.length; i++) {
-%>
from <%= problemInstances.base%> import <%= problemInstances.base %>
<%
}
-%>

# Dynamic imports
from openmdao.api import <%= driverDictionary[driver] %>
from openmdao.api import DumpRecorder, SqliteRecorder
from openmdao.recorders.csv_recorder import CsvRecorder
<%
if (algebraicLoop) {
-%>
from openmdao.api import NLGaussSeidel, ScipyGMRES
<%
}
-%>

class RootGroup(Group):
    def __init__(self):
        super(RootGroup, self).__init__()

        # Add design variables (independently varying components)
<%
// add() statements for design variables
for (i = 0; i < desvars.length; i++) {
    var valueString = desvars[i].value.toString();
    if (valueString.indexOf('.') === -1) {
        valueString += '.0';
    }
-%>
        self.add('<%= desvars[i].name %>', IndepVarComp('<%= desvars[i].connection[0].dst %>', <%= valueString %>))
<%
}
-%>

        # Add component instances
<%
// Generate the code for add() statements for components -
// add instances of components
for (i = 0; i < compInstances.length; i++) {
    promotesString = '';
    for (var j = 0; j < compInstances[i].promotes.length; j++) {
        promotesString += "'" + compInstances[i].promotes[j] + "'";
        if (j != compInstances[i].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= compInstances[i].name %>', <%= compInstances[i].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

        # Add data-driven component instances
<%
// Generate the code for add() statements for data-driven components -
// add instances of components
for (i = 0; i < ddCompInstances.length; i++) {
    promotesString = '';
    for (j = 0; j < ddCompInstances[i].promotes.length; j++) {
        promotesString += "'" + ddCompInstances[i].promotes[j] + "'";
        if (j != ddCompInstances[i].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= ddCompInstances[i].name %>', <%= ddCompInstances[i].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

        # Add problem component instances
<%
// Generate the conde for add() statements for data-driven components -
for (i = 0; i < problemInstances.length; i++) {
    promotesString = '';
    for (j = 0; j < problemInstances[i].promotes.length; j++) {
        promotesString += "'" + problemInstances[i].promotes[j] + "'";
        if (j != problemInstances[i].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= problemInstances[i].name %>', <%= problemInstances.base %>(), promtoes=[<%- prmotesString %>])
<%
}
-%>

        # Add SimPy simulation component instance
<%
for (i = 0; i < processFlowInstances.length; i++) {
    promotesString = '';
    for (j = 0; j < processFlowInstances[i].promotes.length; j++) {
        promotesString += "'" + processFlowInstances[i].promotes[j] + "'";
        if (j != processFlowInstances[i].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= processFlowInstances[i].name %>', <%= processFlowInstances[i].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

        # Add group instances
<%
// Generate the code for add() statements for groups -
// add instances of groups
for (i = 0; i < groupInstances.length; i++) {
    var promotesString = '';
    for (j = 0; j < groupInstances[i].promotes.length; j++) {
        promotesString += "'" + groupInstances[i].promotes[j] + "'";
        if (j != groupInstances[i].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= groupInstances[i].name %>', <%= groupInstances[i].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

        # Add connections between the ports
<%
// Generate the code for connect() statements for connections between ports
for (i = 0; i < connections.length; i++) {
-%>
        self.connect('<%= connections[i].srcParent %>.<%= connections[i].src %>', '<%= connections[i].dstParent %>.<%= connections[i].dst %>')
<%
}
-%>
<%
// Generate the code for connect() statements for connections
// between IndepVarComps' ports and ports
for (i = 0; i < desvars.length; i++) {
-%>
        self.connect('<%= desvars[i].name %>.<%= desvars[i].connection[0].dst %>', '<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %>')
<%
}
-%>

        # Special solvers for handling algebraic loops
<%
// Change nl_solver and ln_driver in case of algebraic loop
if (algebraicLoop) {
-%>
        self.nl_solver = NLGaussSeidel()
        self.nl_solver.options['atol'] = 1.0e-12
        self.ln_solver = ScipyGMRES()
<%
}
-%>


class <%= name %>(Problem):
    def __init__(self):
        super(<%= name %>, self).__init__()

        self.root = RootGroup()

        # Add driver
<%
// Driver settings
if (driver === 'ScipyOptimizer') {
-%>
        self.driver = ScipyOptimizer()
        self.driver.options['optimizer'] = 'SLSQP'

<%
    for (i = 0; i < constraints.length; i++) {
        var limitsString = '';
        if (constraints[i].enableUpper) {
            limitsString = 'upper=';
            valueString = constraints[i].upper;
            if (valueString.indexOf('.') === -1)
                valueString += '.0';
            limitsString += valueString;
        }
        if (constraints[i].enableLower) {
            limitsString += ', lower=';
            valueString = constraints[i].lower;
            if (valueString.indexOf('.') === -1)
                valueString += '.0';
            limitsString += valueString;
        }
        if (!constraints[i].enableLower && !constraints[i].enableUpper)
            break;
-%>
        self.driver.add_constraint('<%= constraints[i].connection[0].srcParent %>.<%= constraints[i].connection[0].src %>', <%= limitsString %>)
<%
    }
-%>
<%
} else if (driver === 'FullFactorialDOE') {
-%>
        self.driver = FullFactorialDriver(<%= doeSamples %>)
<%
}
-%>

        # Add recorders to the driver
        rec = DumpRecorder('out/text/<%= name %>/<%= name %>.txt')
        rec.options['record_params'] = True
        rec.options['record_metadata'] = True
        self.driver.add_recorder(rec)
        f = open('out/text/<%= name %>/<%= name %>.csv', 'w')
        rec = CsvRecorder(f)
        rec.options['record_params'] = True
        self.driver.add_recorder(rec)
<%
if (driver === 'FullFactorialDOE') {
-%>
        rec = SqliteRecorder('out/bin/<%= name %>/<%= name %>.sqlite3')
        rec.options['record_params'] = True
        rec.options['record_metadata'] = True
        self.driver.add_recorder(rec)
<%
}
-%>
        # Let the driver know about design variables
<%
// add_desvar() statements for design variables
for (i = 0; i < desvars.length; i++) {
    if (desvars[i].setByDriver) {
        var upperString = desvars[i].upper.toString(),
            lowerString = desvars[i].lower.toString();
        if (upperString.indexOf('.') === -1) {
            upperString += '.0';
        }
        if (lowerString.indexOf('.') === -1) {
            lowerString += '.0';
        }
-%>
        self.driver.add_desvar('<%= desvars[i].name %>.<%= desvars[i].connection[0].dst %>', lower=<%= lowerString %>, upper=<%= upperString %>)
<%
    }
}
-%>

        # Add objective (in case of optimization)
        # Adding multiple objectives can cause erroneous behavior
<%
if (driver === 'ScipyOptimizer') {
    // add_objective() statements for objectives -- although only 1 objective is supported
    for (i = 0; i < objectives.length; i++) {
-%>
        self.driver.add_objective('<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>')
<%
    }
}
-%>
        self.setup()


if __name__ == "__main__":

    top = <%= name %>()

    print "Running the MOCA problem <%= name %>"

    top.run()

    print "Result:"
    print "------"

<%
// Print result in case of optimizer
if (driver === 'ScipyOptimizer') {
-%>
    print "\tObjective(s):"
    print "\t------------"
<%
    for (i = 0; i < objectives.length; i++) {
-%>
    print("\t\t<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %> = %f" % (top['<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>']))
<%
    }
-%>
    print "\tDesign variable(s):"
    print "\t------------------"
<%
    for (i = 0; i < desvars.length; i++) {
-%>
    print("\t\t<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %> = %f" % (top['<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %>']))
<%
    }
} else {
-%>
    print "The DOE result is written in a file named <%= name %>_dumpfile or <%= name %>_sqlitefile in the parent folder."
<%
}
-%>
