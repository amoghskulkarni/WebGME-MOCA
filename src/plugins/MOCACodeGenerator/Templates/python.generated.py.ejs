#!/usr/bin/python
from openmdao.api import IndepVarComp, Component, Group, Problem, ScipyOptimizer
import sys

<%
// Generate the code for all the components
for (var i = 0; i < OpenMDAOProblem.comps.length; i++) {
%>
class <%= OpenMDAOProblem.comps[i].name %>(Component):
    def __init__(self):
        super(<%= OpenMDAOProblem.comps[i].name %>, self).__init__()
<%
    // Generate "add_param" statements
    for (var j = 0; j < OpenMDAOProblem.comps[i].parameters.length; j++) {
%>
        self.add_param('<%= OpenMDAOProblem.comps[i].parameters[j].name %>', val=<%= OpenMDAOProblem.comps[i].parameters[j].value %>)
<%
    }
%>
<%
    // Generate "add_output" and "add_state" statements
    for (var j = 0; j < OpenMDAOProblem.comps[i].unknowns.length; j++) {
        var unknown_type;
        if (OpenMDAOProblem.comps[i].unknowns[j].type == 'Output') {
            unknown_type = 'output';
        } else {
            unknown_type = 'state';
        }
%>
        self.add_<%= unknown_type %>('<%= OpenMDAOProblem.comps[i].unknowns[j].name %>', val=<%= OpenMDAOProblem.comps[i].unknowns[j].value %>)
<%
    }
%>
    def solve_nonlinear(self, params, unknowns, resids):
        print "Provide the code for solve_nonlinear() in <%= OpenMDAOProblem.comps[i].name %>"

    def linearize(self, params, unknowns, resids):
        print "Provide the Jacobian matrix in linearize() <%= OpenMDAOProblem.comps[i].name %>"
        # If you don't want to provide the Jacobian, comment this code and add follwing line to __init__() -
        # self.fd_options['force_fd'] = True
<%
}
%>


class RootGroup(Group):
    def __init__(self):
        super(RootGroup, self).__init__()
<%
for (var i = 0; i < OpenMDAOProblem.desvars.length; i++) {
%>
        self.add('<%= OpenMDAOProblem.desvars[i].name %>', IndepVarComp('<%= OpenMDAOProblem.desvars[i].connections[0].targetName %>', 0.0))
<%
}
%>
dummy = raw_input("Press enter to exit..")
