#!/usr/bin/python
from openmdao.api import Component
from sklearn.externals import joblib

<%
// Generate the code the component
-%>
class <%= name %>(Component):
    def __init__(self):
        super(<%= name %>, self).__init__()
<%
// Generate "add_param" statements
for (var j = 0; j < parameters.length; j++) {
    valueString = parameters[j].value;
    if (valueString.indexOf('.') === -1)
        valueString += '.0';
-%>
        self.add_param('<%= parameters[j].name %>', val=<%= parameters[j].value %>)
<%
}
-%>
<%
// Generate "add_output" and "add_state" statements
for (var j = 0; j < unknowns.length; j++) {
    var valueString = unknowns[j].value;
    if (valueString.indexOf('.') === -1)
        valueString += '.0';
-%>
        self.add_output('<%= unknowns[j].name %>', val=<%= unknowns[j].value %>)
<%
}
-%>

        self.deriv_options['type'] = 'fd'

        # Load the learned model using joblib dump
        pickled_object = joblib.load('lib/moca_ddmodels/<%= name %>/<%= learnedModel %>.pkl')
        self.features_list = pickled_object['features_list']
        self.learned_model = pickled_object['model']

    def solve_nonlinear(self, params, unknowns, resids):
        ## Feed the **vector** of parameters to the learned model
        [[<%= unknowns[0].name %>]] = self.learned_model.predict(X=[[params[feature_key] for feature_key in self.features_list]])

        # Assign the value(s) to unknown(s)
        unknowns['<%= unknowns[0].name %>'] = <%= unknowns[0].name %>
