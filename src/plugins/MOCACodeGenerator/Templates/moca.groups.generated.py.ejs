#!/usr/bin/python

# Static imports
from openmdao.api import Group
<%
// Generate import statement for every component instance
for (var i = 0; i < compInstances.length; i++) {
-%>
from ..moca_components.<%= compInstances[i].base %> import <%= compInstances[i].base %>
<%
}
-%>
import sys

# Dynamic imports
<%
var algebraicLoopImport = false;
if (algebraicLoop && !algebraicLoopImport) {
    algebraicLoopImport = true;
-%>
from openmdao.api import NLGaussSeidel, ScipyGMRES
<%
}
-%>

<%
// Generate the code for the group
var promotedPorts = [];
-%>
class <%= name %>(Group):
    def __init__(self):
        super(<%= name %>, self).__init__()

<%
// Generate the code for add() statements for components -
// add instances of components
for (var j = 0; j < compInstances.length; j++) {
    promotesString = '';
    for (var k = 0; k < compInstances[j].promotes.length; k++) {
        promotesString += "'" + compInstances[j].promotes[k] + "'";
        promotedPorts.push(compInstances[j].name + "." + compInstances[j].promotes[k]);
        if (k != compInstances[j].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= compInstances[j].name %>', <%= compInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

<%
// Generate the code for add() statements for groups -
// add instances of groups
for (var j = 0; j < groupInstances.length; j++) {
    var promotesString = '';
    for (var k = 0; k < groupInstances[j].promotes.length; k++) {
        promotesString += "'" + groupInstances[j].promotes[k] + "'";
        promotedPorts.push(groupInstances[j].name + "." + groupInstances[j].promotes[k]);
        if (k != groupInstances[j].promotes.length - 1)
            promotesString += ', ';
    }
-%>
        self.add('<%= groupInstances[j].name %>', <%= groupInstances[j].base %>(), promotes=[<%- promotesString %>])
<%
}
-%>

<%
// Generate the code for connect() statements for connections between ports
for (var j = 0; j < connections.length; j++) {
    var srcConnectString = connections[j].srcParent + "." + connections[j].src;
    var dstConnectString = connections[j].dstParent + "." + connections[j].dst;
    // Check whether these strings are in promotedPorts list, i.e. whether these ports are connected
    if (promotedPorts.indexOf(srcConnectString) != -1)
        srcConnectString = srcConnectString.split('.')[1];
    if (promotedPorts.indexOf(dstConnectString) != -1)
        dstConnectString = dstConnectString.split('.')[1];
-%>
        self.connect('<%= srcConnectString %>', '<%= dstConnectString %>')
<%
}
-%>
<%
// Change nl_solver and ln_driver in case of algebraic loop
if (algebraicLoop) {
-%>

        # Special solvers for handling algebraic loops
        self.nl_solver = NLGaussSeidel()
        self.nl_solver.options['atol'] = 1.0e-12
        self.ln_solver = ScipyGMRES()
<%
}
-%>
