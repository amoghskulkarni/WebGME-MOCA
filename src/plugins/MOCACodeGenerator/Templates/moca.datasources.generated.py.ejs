#!/usr/bin/python
from influxdb import InfluxDBClient
from numpy import array as np_array

<%
var query_params_list = [],
    query_params_names_list = "",
    query_results_list = [];
for (var i = 0; i < children.length; i++) {
    if (children[i].meta !== 'QueryResultGroups'
        && children[i].meta !== 'QueryResultTime'
        && children[i].meta !== 'QueryResultValue') {
        query_params_list.push(children[i]);
    } else {
        query_results_list.push(children[i]);
    }
}
for (var i = 0; i < query_params_list.length; i++) {
    query_params_names_list += query_params_list[i].name;
    if (i < query_params_list.length - 1) {
        query_params_names_list += ", ";
    }
}
-%>

def sanity_check(param_list):
    # TODO: Add the logic to check if the parameters to this methods are of equal dimensions
    # TODO: Implement the method with variable arguments signature
    return True

class <%= name %>():
    def __init__(self, <%= query_params_names_list %>):
        # Query parameters
        self.query_params = {}
        self.query_params['for_each'] = <%= forEachTag %>
        self.query_params['operation'] = <%= operationOnMeasurement %>
        self.query_params['measurement'] = <%= variableNameInDB %>
<%
for (var i = 0; i < query_params_list.length; i++) {
    if (query_params_list[i].meta === 'QueryParamTags') {
-%>
        self.query_params['tags'] = <%= query_params_list[i].name %>
<%
    } else {
-%>
        self.query_params['tags'] = <%= tags %>
<%
    }

    if (query_params_list[i].meta === 'QueryParamTEnd') {
-%>
        self.query_params['t_end'] = <%= query_params_list[i].name %>
<%
    } else {
-%>
        self.query_params['t_end'] = <%= tEnd %>
<%
    }

    if (query_params_list[i].meta === 'QueryParamTStart') {
-%>
        self.query_params['t_start'] = <%= query_params_list[i].name %>
<%
    } else {
-%>
        self.query_params['t_start'] = <%= tStart %>
<%
    }

    if (query_params_list[i].meta === 'QueryParamValue') {
-%>
        self.query_params['value'] = <%= query_params_list[i].name %>
<%
    } else {
-%>
        self.query_params['value'] = <%= value %>
<%
    }
}
-%>

        # Query results
        self.query_results = {}
<%
for (var i = 0; i < query_results_list.length; i++) {
-%>
        self.query_results['<%= query_results_list[i].name %>'] = []
<%
}
-%>

        # InfluxDB client
        self.client = InfluxDBClient(host='<%= dbHame %>', port=<%= dbPortNo %>, database='<%= dbName %>')

    # TODO: Private method for building a query
    def __build_query(self):
        pass

    # TODO: Private method to execute a query
    def __execute_query(self):
        # Convert to np_array, check shape and then execute one or multiple queries
        pass

    # TODO: Method to get the result assigned to query_result member of this object
    def get_query_result(self):
        pass
