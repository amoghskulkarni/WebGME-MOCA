{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <%= name %> Notebook\n",
    "***",
    "\n",
    "## Execution\n",
    "\n",
    "Import the problem (and optionally the parsing and/or plotting utilities)."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from src.<%= name %> import <%= name %>\n"
<%
if (recorder === 'Specific') {
-%>
    ,"from util.MOCAparseutils import SqliteParseUtils"
<%
}
-%>
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instantiate the problem."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "top = <%= name %>()"
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the problem."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "top.run()"
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***",
    "\n",
    "## Analysis\n"
<%
if (driver === 'ScipyOptimizer') {
-%>
    ,"\n"
    ,"_**Optimization analysis**_\n"
    ,"\n"
    ,"**Objectives**"
<%
}
-%>
   ]
  }
<%
if (driver === 'ScipyOptimizer') {
-%>
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Print objectives' values"
    ,"\n"
<%
    for (var i = 0; i < objectives.length; i++) {
-%>
    ,"print(\"<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %> = %f \" % (top['<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>']))"
<%
        if (i != objectives.length - 1) {
-%>
    ,"\n"
<%
        }
    }
-%>
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Design Variables**"
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Print design variables' values"
    ,"\n"
<%
    for (var i = 0; i < desvars.length; i++) {
-%>
    ,"print(\"<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %> = %f\" % (top['<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %>']))"
<%
        if (i != desvars.length - 1) {
-%>
    ,"\n"
<%
        }
    }
-%>
   ]
  }
<%
} else if (driver === 'FullFactorialDOE' && recorder !== '(None)') {
-%>
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_**Design-of-experiment analysis**_"
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
<%
    if (recorder === 'Dump') {
-%>
    "# Give an example of using dump parser utility"
<%
    } else if (recorder === 'Specific') {
-%>
    "# Get the database filename.\n"
    ,"filename = top.driver.recorders._recorders[0].out.filename\n"
    ,"# Wait for analysis to finish.\n"
    ,"top.cleanup()\n"
    ,"\n"
    ,"# Get the list(s) of values which you wanted to record using SqliteParseUtils using -\n"
    ,"# getParamValues(), getUnknownValues() or getTimestampValues()\n"
<%
        // TODO: Confirm that the record you are going to use here is connected to
        // a port of type "param"
        if (records.length > 0) {
-%>
    ,"<%= records[0].connection[0].src %>_list = SqliteParseUtils.getParamValues(filename, '<%= records[0].connection[0].srcParent %>.<%= records[0].connection[0].src %>')"
<%
        }
-%>
    ,"\n"
<%
    }
-%>
   ]
  }
<%
} else {
-%>
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No analysis / recorder selected."
   ]
  }
<%
}
-%>
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
