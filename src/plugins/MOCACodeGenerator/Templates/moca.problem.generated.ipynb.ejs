{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <%= name %> Notebook\n",
    "***",
    "\n",
    "## Execution\n",
    "\n",
    "Import the problem."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from src.<%= name %> import <%= name %>"
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instantiate the problem."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "top = <%= name %>()"
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the problem."
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "top.run()"
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***",
    "\n",
    "## Analysis\n"
<%
if (driver === 'ScipyOptimizer') {
-%>
    ,"\n"
    ,"_**Optimization analysis**_\n"
    ,"\n"
    ,"**Objectives**"
<%
}
-%>
   ]
  }
<%
if (driver === 'ScipyOptimizer') {
-%>
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Print objectives' values"
    ,"\n"
<%
    for (var i = 0; i < objectives.length; i++) {
-%>
    ,"print(\"<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %> = %f \" % (top['<%= objectives[i].connection[0].srcParent %>.<%= objectives[i].connection[0].src %>']))"
<%
        if (i != objectives.length - 1) {
-%>
    ,"\n"
<%
        }
    }
-%>
   ]
  }
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Design Variables**"
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Print design variables' values"
    ,"\n"
<%
    for (var i = 0; i < desvars.length; i++) {
-%>
    ,"print(\"<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %> = %f\" % (top['<%= desvars[i].connection[0].dstParent %>.<%= desvars[i].connection[0].dst %>']))"
<%
        if (i != desvars.length - 1) {
-%>
    ,"\n"
<%
        }
    }
-%>
   ]
  }
<%
} else if (driver === 'FullFactorialDOE' && recorder !== '(None)') {
-%>
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_**Design-of-experiment analysis**_"
   ]
  }
  ,{
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
<%
    if (recorder === 'Dump') {
-%>
    "# The recorder used is dump recorder, which creates the dumpfile in /out directory.\n"
    ,"# It contains all the values of parameters and unknowns in human readable format."
<%
    } else if (recorder === 'Specific') {
-%>
    "# First, import the utility and initialize it.\n"
    ,"from util.MOCAparseutils import SqliteParseUtils\n"
    ,"parseutils = SqliteParseUtils(top)\n"
    ,"\n"
    ,"# Then, get the list(s) of values which you wanted to record using SqliteParseUtils using -\n"
    ,"# getParamValues(), getUnknownValues() or getTimestampValues()\n"
<%
        for (var i = 0; i < records.length; i++) {
-%>
    ,"<%= records[i].connection[0].srcParent %>_<%= records[i].connection[0].src %>__values = "
    ,"parseutils.get<%= records[i].type %>Values('<%= records[i].connection[0].srcParent %>.<%= records[i].connection[0].src %>')"
    ,"\n"
<%
        }
-%>
    ,"timestamps = parseutils.getTimestampValues()"
<%
    }
-%>
   ]
  }
<%
    if (recorder === 'Specific' && records.length > 1) {
-%>
  ,{
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "collapsed": true
    },
    "outputs": [],
    "source": [
        "# Plotting\n"
        ,"\n"
        ,"%matplotlib inline\n"
        ,"from util.MOCAplotutils import PlotUtils\n"
        ,"plotutils = PlotUtils()\n"
        ,"\n"
        ,"x_axis_limits = [0, 1]\n"
        ,"y_axis_limits = [0, 1]\n"
        ,"x_axis_label = '<%= records[0].connection[0].srcParent %>.<%= records[0].connection[0].src %>'\n"
        ,"y_axis_label = '<%= records[1].connection[0].srcParent %>.<%= records[1].connection[0].src %>'\n"
        ,"\n"
        ,"plotutils.plot2D(<%= records[0].connection[0].srcParent %>_<%= records[0].connection[0].src %>__values, "
        ,"<%= records[1].connection[0].srcParent %>_<%= records[1].connection[0].src %>__values, "
        ,"x_axis_limits, y_axis_limits, x_axis_label, y_axis_label)"
    ]
  }
<%
    }
-%>
<%
} else {
-%>
  ,{
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No recorder selected."
   ]
  }
<%
}
-%>
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
