SellarDisc1
-----------
	solve_nonlinear()
		unknowns['y1'] = z1**2 + z2 + x - 0.2*y2
	linearize()
		J = {}

        J['y1','y2'] = -0.2
        J['y1', 'z1'] = 2 * params['z1']
        J['y1','z2'] = 1.0
        J['y1','x'] = 1.0

        return J

SellarDisc2
-----------
	solve_nonlinear()
		# Note: this may cause some issues. However, y1 is constrained to be
        # above 3.16, so lets just let it converge, and the optimizer will
        # throw it out
        y1 = abs(y1)

        unknowns['y2'] = y1**.5 + z1 + z2
	linearize()
		J = {}

        J['y2', 'y1'] = .5*abs(params['y1'])**-.5
        J['y2', 'z1'] = 1.0
        J['y2', 'z2'] = 1.0

        return J

SellarConstraint2
-----------------
	solve_nonlinear()
		con2 = y2 - 24.0

SellarConstraint1
-----------------
	solve_nonlinear()
		con1 = 3.16 - y1

SellarObjective
---------------
	solve_nonlinear()
		from math import exp			# ???
		obj = x**2 + z[1] + y1 + exp(-y2)

