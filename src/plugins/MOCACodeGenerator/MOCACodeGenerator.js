/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Feb 01 2016 12:33:01 GMT-0600 (Central Standard Time).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'common/util/ejs',
    'common/util/xmljsonconverter',
    'plugin/MOCACodeGenerator/MOCACodeGenerator/Templates/Templates',
    'q'
], function (
    PluginConfig,
    PluginBase,
    ejs,
    Converter,
    TEMPLATES,
    Q) {
    'use strict';

    /**
     * Initializes a new instance of MOCACodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MOCACodeGenerator.
     * @constructor
     */
    var MOCACodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);

        this.LANGUAGES = [
            {
                name: 'Python',
                generated: 'python.generated.py.ejs',
                batFile: 'python.bat.ejs',
                static: 'python.simulator.py.ejs',
                fileExtension: 'py'
            }
        ];
    };

    // Prototypal inheritance from PluginBase.
    MOCACodeGenerator.prototype = Object.create(PluginBase.prototype);
    MOCACodeGenerator.prototype.constructor = MOCACodeGenerator;

    /**
     * Gets the name of the MOCACodeGenerator.
     * @returns {string} The name of the plugin.
     * @public
     */
    MOCACodeGenerator.prototype.getName = function () {
        return 'MOCACodeGenerator';
    };

    /**
     * Gets the semantic version (semver.org) of the MOCACodeGenerator.
     * @returns {string} The version of the plugin.
     * @public
     */
    MOCACodeGenerator.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MOCACodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
        nodeObject = self.activeNode;

        if (self.core.getPath(nodeObject) === '' ||
            self.core.getAttribute(self.getMetaType(nodeObject), 'name') !== 'Problem') {
            callback(new Error('Active node is not a "OpenMDAO Problem".'), self.result);
            return;
        }

        self.generateDataModel(nodeObject)
            .then(function (dataModel) {
                self.logger.info(JSON.stringify(dataModel, null, 4));
                return self.generateArtifact(dataModel);
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err);
                self.createMessage(null, err.message, 'error');
                self.result.setSuccess(false);
                callback(null, self.result);
            })
            .done();
    };


    MOCACodeGenerator.prototype.generateDataModel = function (problemNode) {
        var self = this,
            deferred = new Q.defer(),
            dataModel = {
                OpenMDAOProblem: {
                    name: self.core.getAttribute(problemNode, 'name'),
                    driver: self.core.getAttribute(problemNode, 'Driver'),
                    comps: [],
                    groups: [],
                    desvars: [],
                    objectives: [],
                    records: []
                }
            };


        self.core.loadChildren(problemNode, function (err, children) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            var componentPromises = [],
                groupPromises = [],
                designvariablePromises = [],
                objectivePromises = [],
                recordPromises = [],
                i;

            for (i = 0; i < children.length; i += 1) {
              if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Component')
                  componentPromises.push(self.getComponentData(children[i]));
//               else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Group')
//                   groupPromises.push(self.getGroupData(children[i]));
              else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'DesignVariable')
                  designvariablePromises.push(self.getDesignVariableData(children[i]));
              else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Objective')
                  objectivePromises.push(self.getObjectiveData(children[i]));
              else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Record')
                  recordPromises.push(self.getRecordData(children[i]));
                // childPromises.push(self.getChildData(children[i]));
            }

            Q.all(componentPromises)
                .then(function (componentsData) {
                    dataModel.OpenMDAOProblem.comps = componentsData;
                    Q.all(groupPromises)
                        .then(function (groupsData) {
                            dataModel.OpenMDAOProblem.groups = groupsData;
                            Q.all(designvariablePromises)
                                .then(function (designvariablesData) {
                                    dataModel.OpenMDAOProblem.desvars = designvariablesData;
                                    Q.all(objectivePromises)
                                        .then(function (objectivesData) {
                                            dataModel.OpenMDAOProblem.objectives = objectivesData;
                                            Q.all(recordPromises)
                                                .then(function (recordData) {
                                                    dataModel.OpenMDAOProblem.records = recordData;
                                                    deferred.resolve(dataModel);
                                                })
                                                .catch(deferred.reject);
                                        })
                                        .catch(deferred.reject);
                                })
                                .catch(deferred.reject);
                        })
                        .catch(deferred.reject);
                })
                .catch(deferred.reject);
        });

        return deferred.promise;
    };

    MOCACodeGenerator.prototype.getComponentData = function(componentNode) {
        var self = this,
            deferred = new Q.defer(),
            componentData = {
                name: self.core.getAttribute(componentNode, 'name'),
                base: self.core.getAttribute(componentNode, 'name'),
                parameters: [],
                unknowns: [],
                residues: []
            }

        self.core.loadChildren(componentNode, function(err, children) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            var parameterPromises = [],
                unknownPromises = [],
                residuePromises = [],
                i;

            for (i = 0; i < children.length; i += 1) {
                if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Parameter')
                    parameterPromises.push(self.getParameterData(children[i]));
                else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Unknown')
                    unknownPromises.push(self.getUnknownData(children[i]));
                else if (self.core.getAttribute(self.getMetaType(children[i]), 'name') == 'Residue')
                    residuePromises.push(self.getResidueData(children[i]));
                  // childPromises.push(self.getChildData(children[i]));
            }

            Q.all(parameterPromises)
                .then(function (parametersData) {
                    componentData.parameters = parametersData;
                    Q.all(unknownPromises)
                        .then(function (unknownsData) {
                            componentData.unknowns = unknownsData;
                            Q.all(residuePromises)
                                .then(function (residuesData) {
                                    componentData.residues = residuesData;
                                    deferred.resolve(componentData);
                                })
                                .catch(deferred.reject);
                        })
                        .catch(deferred.reject);
                })
                .catch(deferred.reject);
        });

        return deferred.promise;
    }

    MOCACodeGenerator.prototype.getParameterData = function(parameterNode) {
        var self = this,
            deferred = new Q.defer(),
            parameterData = {
                name: self.core.getAttribute(parameterNode, 'name'),
                value: self.core.getAttribute(parameterNode, 'Value')
            },
            error,
            counter;

        deferred.resolve(parameterData);

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.getUnknownData = function(unknownNode) {
        var self = this,
            deferred = new Q.defer(),
            unknownData = {
                name: self.core.getAttribute(unknownNode, 'name'),
                value: self.core.getAttribute(unknownNode, 'Value'),
                type: self.core.getAttribute(unknownNode, 'Type'),
                connections: [
                    // targetName: the name of the port that this unknown is connected to
                    // targetParentName: the name of the parent of the port that this unknown
                    //              is connected to
                ]
            },
            error,
            counter;

        // Load all connections going out from the stateNode, i.e. has the stateNode as 'src'.
        self.core.loadCollection(unknownNode, 'src', function (err, connections) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            var i;
            counter = connections.length;

            // For each connection load the destination state.
            for (i = 0; i < connections.length; i += 1) {
                self.core.loadPointer(connections[i], 'dst', function (err, dstNode) {
                    if (err) {
                        error = new Error(err);
                    } else {
                        unknownData.connections.push({
                            targetName: self.core.getAttribute(dstNode, 'name')
                            // TODO: targetParentName
                        });
                    }

                    counter -= 1;
                    if (counter === 0) {
                        if (error) {
                            deferred.reject(error);
                        } else {
                            deferred.resolve(unknownData);
                        }
                    }
                });
            }

            // Make sure to resolve when there are no connections.
            if (connections.length === 0) {
                deferred.resolve(unknownData);
            }
        });

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.getResidueData = function(residueNode) {
        var self = this,
            deferred = new Q.defer(),
            residueData = {
                name: self.core.getAttribute(residueNode, 'name'),
                value: self.core.getAttribute(residueNode, 'Value')
            },
            error,
            counter;

        deferred.resolve(residueData);

        return deferred.promise;
    };


    // TODO: getGroupData()


    MOCACodeGenerator.prototype.getDesignVariableData = function(designvariableNode) {
        var self = this,
            deferred = new Q.defer(),
            designvariableData = {
                name: self.core.getAttribute(designvariableNode, 'name'),
                upper: self.core.getAttribute(designvariableNode, 'Upper'),
                lower: self.core.getAttribute(designvariableNode, 'Lower'),
                connections: [
                    // targetName: the name of the port that this unknown is connected to
                    // targetParentName: the name of the parent of the port that this unknown
                    //              is connected to
                ]
            },
            error,
            counter;

        // Load all connections going out from the node, i.e. has the stateNode as 'src'.
        self.core.loadCollection(designvariableNode, 'src', function (err, connections) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            var i;
            counter = connections.length;

            // For each connection load the destination node.
            for (i = 0; i < connections.length; i += 1) {
                self.core.loadPointer(connections[i], 'dst', function (err, dstNode) {
                    if (err) {
                        error = new Error(err);
                    } else {
                        designvariableData.connections.push({
                            targetName: self.core.getAttribute(dstNode, 'name')
                            // TODO: targetParentName
                        });
                    }

                    counter -= 1;
                    if (counter === 0) {
                        if (error) {
                            deferred.reject(error);
                        } else {
                            deferred.resolve(designvariableData);
                        }
                    }
                });
            }

            // Make sure to resolve when there are no connections.
            if (connections.length === 0) {
                deferred.resolve(designvariableData);
            }
        });

        return deferred.promise;
    };

    MOCACodeGenerator.prototype.getObjectiveData = function(objectiveNode) {
        var self = this,
            deferred = new Q.defer(),
            objectiveData = {
                name: self.core.getAttribute(objectiveNode, 'name'),
                connections: [
                    // sourceName: the name of the port that this unknown is connected to
                    // sourceParentName: the name of the parent of the port that this unknown
                    //              is connected to
                ]
            },
            error,
            counter;

        // Load all connections coming in into the node, i.e. has the Node as 'dst'.
        self.core.loadCollection(objectiveNode, 'dst', function (err, connections) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            var i;
            counter = connections.length;

            // For each connection load the src node.
            for (i = 0; i < connections.length; i += 1) {
                self.core.loadPointer(connections[i], 'src', function (err, srcNode) {
                    if (err) {
                        error = new Error(err);
                    } else {
                        objectiveData.connections.push({
                            sourceName: self.core.getAttribute(srcNode, 'name')
                            // TODO: sourceParentName
                        });
                    }

                    counter -= 1;
                    if (counter === 0) {
                        if (error) {
                            deferred.reject(error);
                        } else {
                            deferred.resolve(objectiveData);
                        }
                    }
                });
            }

            // Make sure to resolve when there are no connections.
            if (connections.length === 0) {
                deferred.resolve(objectiveData);
            }
        });

        return deferred.promise;
    };

    MOCACodeGenerator.prototype.getRecordData = function(recordNode) {
        var self = this,
            deferred = new Q.defer(),
            recordData = {
                name: self.core.getAttribute(designvariableNode, 'name')
            },
            error,
            counter;

        deferred.resolve(objectiveData);

        return deferred.promise;
    };

    MOCACodeGenerator.prototype.generateArtifact = function (dataModel) {
        var self = this,
            filesToAdd = {},
            deferred = new Q.defer(),
            artifact = self.blobClient.createArtifact(dataModel.OpenMDAOProblem.name);

        filesToAdd[dataModel.OpenMDAOProblem.name + '.json'] = JSON.stringify(dataModel, null, 2);
        filesToAdd[dataModel.OpenMDAOProblem.name + '_metadata.json'] = JSON.stringify({
            projectId: self.projectId,
            commitHash: self.commitHash,
            branchName: self.branchName,
            timeStamp: (new Date()).toISOString(),
            pluginVersion: self.getVersion()
        }, null, 2);

        self.LANGUAGES.forEach(function (languageInfo) {
            self.addLanguageToFiles(filesToAdd, dataModel, languageInfo);
        });

        artifact.addFiles(filesToAdd, function (err) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    deferred.reject(new Error(err));
                    return;
                }

                self.result.addArtifact(hashes[0]);
                deferred.resolve();
            });
        });

        return deferred.promise;
    };


    MOCACodeGenerator.prototype.addLanguageToFiles = function (filesToAdd, dataModel, languageInfo) {
        var genFileName = 'MOCA-GeneratedCode/' + dataModel.OpenMDAOProblem.name + '.' + languageInfo.fileExtension,
            batFileName = 'MOCA-GeneratedCode/' + dataModel.OpenMDAOProblem.name + '.bat';

        this.logger.debug(genFileName);
        this.logger.debug(batFileName);

        filesToAdd[genFileName] = ejs.render(TEMPLATES[languageInfo.generated], dataModel);
        filesToAdd[batFileName] = ejs.render(TEMPLATES[languageInfo.batFile], dataModel);

        //TODO Add the static files too.
        this.logger.info('Generated files for ', languageInfo.name);

    };


    return MOCACodeGenerator;
});
