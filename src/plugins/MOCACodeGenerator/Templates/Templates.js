/* Generated file based on ejs templates */
define([], function() {
    return {
    "python.bat.ejs": "echo off\r\npython <%= OpenMDAOProblem.name %>.py\r\n",
    "python.generated.py.ejs": "#!/usr/bin/python\r\nfrom openmdao.api import IndepVarComp, Component, Group, Problem, ScipyOptimizer\r\nimport sys\r\n\r\n<%\r\n// Generate the code for all the components\r\nfor (var i = 0; i < OpenMDAOProblem.comps.length; i++) {\r\n%>\r\nclass <%= OpenMDAOProblem.comps[i].name %>(Component):\r\n    def __init__(self):\r\n        super(<%= OpenMDAOProblem.comps[i].name %>, self).__init__()\r\n<%\r\n    // Generate \"add_param\" statements\r\n    for (var j = 0; j < OpenMDAOProblem.comps[i].parameters.length; j++) {\r\n%>\r\n        self.add_param('<%= OpenMDAOProblem.comps[i].parameters[j].name %>', val=<%= OpenMDAOProblem.comps[i].parameters[j].value %>)\r\n<%\r\n    }\r\n%>\r\n<%\r\n    // Generate \"add_output\" and \"add_state\" statements\r\n    for (var j = 0; j < OpenMDAOProblem.comps[i].unknowns.length; j++) {\r\n        var unknown_type;\r\n        if (OpenMDAOProblem.comps[i].unknowns[j].type == 'Output') {\r\n            unknown_type = 'output';\r\n        } else {\r\n            unknown_type = 'state';\r\n        }\r\n%>\r\n        self.add_<%= unknown_type %>('<%= OpenMDAOProblem.comps[i].unknowns[j].name %>', val=<%= OpenMDAOProblem.comps[i].unknowns[j].value %>)\r\n<%\r\n    }\r\n%>\r\n    def solve_nonlinear(self, params, unknowns, resids):\r\n        print \"Provide the code for solve_nonlinear() in <%= OpenMDAOProblem.comps[i].name %>\"\r\n\r\n    def linearize(self, params, unknowns, resids):\r\n        print \"Provide the Jacobian matrix in linearize() <%= OpenMDAOProblem.comps[i].name %>\"\r\n        # If you don't want to provide the Jacobian, comment this code and add follwing line to __init__() -\r\n        # self.fd_options['force_fd'] = True\r\n<%\r\n}\r\n%>\r\n\r\n\r\nclass RootGroup(Group):\r\n    def __init__(self):\r\n        super(RootGroup, self).__init__()\r\n<%\r\nfor (var i = 0; i < OpenMDAOProblem.desvars.length; i++) {\r\n%>\r\n        self.add('<%= OpenMDAOProblem.desvars[i].name %>', IndepVarComp('<%= OpenMDAOProblem.desvars[i].connections[0].targetName %>', 0.0))\r\n<%\r\n}\r\n%>\r\ndummy = raw_input(\"Press enter to exit..\")\r\n"
}});