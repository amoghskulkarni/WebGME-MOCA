__author__ = 'Amogh'
__doc__ = 'The utility class defined in this file gives the methods to plot' \
          'the data points saved in the list on 2D and 3D plots.'

from bokeh.models import HoverTool
from bokeh.plotting import figure
from bokeh.io import show, output_notebook, push_notebook

from pandas import DataFrame
from numpy import isclose

from copy import deepcopy

from ipywidgets import interact
import ipywidgets as widgets

<%
if (driver === 'FullFactorialDOE') {
-%>

class <%= name %>_PlotUtils:
    def __init__(self, parseutils):
        timestamps = parseutils.getTimestampValues()
<%
    // generate __values statements for all the records connected to Unknowns only
    for (var j = 0; j < records.length; j++) {
        if (records[j].type === "Unknown") {
-%>
        <%= records[j].connection[0].srcParent %>_<%= records[j].connection[0].src %>__values = parseutils.getUnknownValues('<%= records[j].connection[0].srcParent %>.<%= records[j].connection[0].src %>')
<%
        }
    }
    // generate __values statements for all the desvars
    // all desvars are recorded by default, and we access their values by taking the values of IndepVarComps
    // Since, all IndepVarComps' outputs are Unknowns, we are using getUnknownValues
    for (var j = 0; j < desvars.length; j++) {
-%>
        <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values = parseutils.getUnknownValues('<%= desvars[j].name %>.<%= desvars[j].connection[0].dst %>')
<%
    }
-%>

        # Dataframe construction
        self.df = DataFrame({'timestamps': timestamps,
<%
    for (var j = 0; j < desvars.length; j++) {
-%>
                             '<%= desvars[j].connection[0].dstParent %>.<%= desvars[j].connection[0].dst %>': <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values,
<%
    }
    for (var j = 0; j < records.length-1; j++) {
        if (records[j].type === "Unknown") {
-%>
                             '<%= records[j].connection[0].srcParent %>.<%= records[j].connection[0].src %>':  <%= records[j].connection[0].srcParent %>_<%= records[j].connection[0].src %>__values,
<%
        }
    }
-%>
                             '<%= records[records.length-1].connection[0].srcParent %>.<%= records[records.length-1].connection[0].src %>':  <%= records[records.length-1].connection[0].srcParent %>_<%= records[records.length-1].connection[0].src %>__values })
        # step calculation
<%
    for (var j = 0; j < desvars.length; j++) {
        if (desvars[j].setByDriver) {
-%>
        <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values__sorted = sorted(<%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values)
        self.<%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__step = <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values__sorted[<%= doeSamples %>] - <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values__sorted[0]
<%
        }
    }
-%>

        # bokeh init
        output_notebook()

        # axes configuration
<%
    for (var j = 0; j < desvars.length; j++) {
        if (desvars[j].setByDriver) {
-%>
        x_axis_values = <%= desvars[j].connection[0].dstParent %>_<%= desvars[j].connection[0].dst %>__values
<%
            break;
        }
    }
-%>
        y_axis_values = <%= records[0].connection[0].srcParent %>_<%= records[0].connection[0].src %>__values

        # bokeh config
        self.p = figure(title='<%= name %>')
        self.p.add_tools(HoverTool())
        self.r = self.p.circle(x_axis_values, y_axis_values, size=3, alpha=0.5)
<%
    var slider_desvars = [];
    for (var j = 0; j < desvars.length; j++) {
        if (desvars[j].setByDriver) {
            slider_desvars.push({
                dstParent: desvars[j].connection[0].dstParent,
                dst: desvars[j].connection[0].dst,
                upper: desvars[j].upper,
                lower: desvars[j].lower,
                value: desvars[j].value
            });
        }
    }
    // This string should include all the desvars for which sliders are to be generated
    var desvar_function_signature_string = "";
    for (var j = 0; j < slider_desvars.length; j++) {
        var substring = slider_desvars[j].dst + "_slider, " + slider_desvars[j].dst + "_all";
        desvar_function_signature_string += substring;
        if (j < slider_desvars.length - 1)
            desvar_function_signature_string += ", ";
    }
-%>

    def update(self, x, y, <%= desvar_function_signature_string %>):
        sliced_df = deepcopy(self.df)
<%
    // These two statements are for each slider_desvar, which check tick-box for it
    for (var j = 0; j < slider_desvars.length; j++) {
-%>

        if not <%= slider_desvars[j].dst %>_all:
            sliced_df = sliced_df.loc[isclose(sliced_df['<%= slider_desvars[j].dstParent %>.<%= slider_desvars[j].dst %>'], <%= slider_desvars[j].dst %>_slider)]
<%
    }
-%>

        self.r.data_source.data['x'] = sliced_df[x]
        self.r.data_source.data['y'] = sliced_df[y]
        push_notebook()

    def plot (self):
        self.handle = show(self.p, notebook_handle=True)
<%
    var domain_options_string = "";
    var range_options_string = "";
    for (var j = 0; j < records.length; j++) {
        range_options_string += "'" + records[j].connection[0].srcParent + '.' + records[j].connection[0].src + "'";
        if (j < records.length - 1) {
            range_options_string += ", ";
        }
    }

    for (var j = 0; j < slider_desvars.length; j++) {
        domain_options_string += "'" + slider_desvars[j].dstParent + '.' + slider_desvars[j].dst + "'";
        if (j < slider_desvars.length - 1) {
            domain_options_string += ", ";
        }
    }
-%>

    def show_widgets(self):
        domain_options = [<%- domain_options_string %>]
        range_options = [<%- range_options_string %>]
        interact(self.update,
            x=widgets.Dropdown(options=domain_options, value=domain_options[0], description='Domain (X-axis)'),
            y=widgets.Dropdown(options=range_options, value=range_options[0], description='Range (Y-axis)'),
<%
    for (var j = 0; j < slider_desvars.length; j++) {
        var trailing_character;
        if (j < slider_desvars.length - 1)
            trailing_character = ",";
        else
            trailing_character = ")";
-%>
            <%= slider_desvars[j].dst %>_slider = widgets.FloatSlider(value=<%= slider_desvars[j].value %>, min=<%= slider_desvars[j].lower %>, max=<%= slider_desvars[j].upper %>, step=self.<%= slider_desvars[j].dstParent %>_<%= slider_desvars[j].dst %>__step, description='<%= slider_desvars[j].dstParent %>.<%= slider_desvars[j].dst %>'),
            <%= slider_desvars[j].dst %>_all = widgets.Checkbox(description='<%= slider_desvars[j].dstParent %>.<%= slider_desvars[j].dst %> (all values)', value=True)<%= trailing_character %>
<%
    }
}
-%>
