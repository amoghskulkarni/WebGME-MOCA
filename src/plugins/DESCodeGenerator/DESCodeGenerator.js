/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Mon Apr 03 2017 17:50:03 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs',
    'common/util/xmljsonconverter',
    'plugin/MOCACodeGenerator/MOCACodeGenerator/Templates/Templates',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    Converter,
    TEMPLATES,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of DESCodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin DESCodeGenerator.
     * @constructor
     */
    var DESCodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;

        this.FILES = [
            {
                name: 'simulation',
                template: 'des.simpymodel.generated.py.ejs',
                ipynbfile: 'des.simpymodel.generated.ipynb.ejs'
            }
        ];
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    DESCodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    DESCodeGenerator.prototype = Object.create(PluginBase.prototype);
    DESCodeGenerator.prototype.constructor = DESCodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    DESCodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
        nodeObject = self.activeNode;

        if (self.core.getParent(nodeObject) === null &&
            self.core.getAttribute(nodeObject, 'name') !== "ROOT") {
            callback(new Error('The plugin has to be executed from ROOT.'), self.result);
            return;
        }

        self.generateDataModel(nodeObject)
            .then(function (dataModel) {
                // Create JSON files for the models only if the plugin is invoked at the ROOT
                if (self.getMetaType(nodeObject) === null) {
                    self.logger.info(JSON.stringify(dataModel, null, 4));
                    return self.generateArtifact('ROOT', dataModel);
                }
                else
                    return self.generateArtifact('Problem', dataModel);
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err);
                self.createMessage(null, err.message, 'error');
                self.result.setSuccess(false);
                callback(null, self.result);
            })
            .done();

    };
    
    DESCodeGenerator.prototype.generateDataModel = function (rootNode) {
        var self = this,
            dataModel = {
                simulations: []
            },
            simulationLibraryPromises = [];

        // If the code generator is invoked from ROOT
        if (self.getMetaType(rootNode) === null) {
            return self.core.loadChildren(rootNode)
                .then(function (children) {
                    for (var i = 0; i < children.length; i++) {
                        // If this is a component
                    }
                })
        }
    };

    return DESCodeGenerator;
});
